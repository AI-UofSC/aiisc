{"ast":null,"code":"// Style\nimport \"../../../src/components/VParallax/VParallax.sass\"; // Mixins\n\nimport Translatable from '../../mixins/translatable';\nimport mixins from '../../util/mixins';\nconst baseMixins = mixins(Translatable);\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-parallax',\n  props: {\n    alt: {\n      type: String,\n      default: ''\n    },\n    height: {\n      type: [String, Number],\n      default: 500\n    },\n    src: String,\n    srcset: String\n  },\n  data: () => ({\n    isBooted: false\n  }),\n  computed: {\n    styles() {\n      return {\n        display: 'block',\n        opacity: this.isBooted ? 1 : 0,\n        transform: `translate(-50%, ${this.parallax}px)`\n      };\n    }\n\n  },\n\n  mounted() {\n    this.init();\n  },\n\n  methods: {\n    init() {\n      const img = this.$refs.img;\n      if (!img) return;\n\n      if (img.complete) {\n        this.translate();\n        this.listeners();\n      } else {\n        img.addEventListener('load', () => {\n          this.translate();\n          this.listeners();\n        }, false);\n      }\n\n      this.isBooted = true;\n    },\n\n    objHeight() {\n      return this.$refs.img.naturalHeight;\n    }\n\n  },\n\n  render(h) {\n    const imgData = {\n      staticClass: 'v-parallax__image',\n      style: this.styles,\n      attrs: {\n        src: this.src,\n        srcset: this.srcset,\n        alt: this.alt\n      },\n      ref: 'img'\n    };\n    const container = h('div', {\n      staticClass: 'v-parallax__image-container'\n    }, [h('img', imgData)]);\n    const content = h('div', {\n      staticClass: 'v-parallax__content'\n    }, this.$slots.default);\n    return h('div', {\n      staticClass: 'v-parallax',\n      style: {\n        height: `${this.height}px`\n      },\n      on: this.$listeners\n    }, [container, content]);\n  }\n\n});","map":{"version":3,"mappings":"AAAA;AACA,OAAO,kDAAP,C,CAEA;;AACA,OAAOA,YAAP,MAAyB,2BAAzB;AAIA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,UAAU,GAAGD,MAAM,CACvBD,YADuB,CAAzB;AASA;;AACA,eAAeE,UAAU,CAACC,MAAX,GAA6BA,MAA7B,CAAoC;AACjDC,MAAI,EAAE,YAD2C;AAGjDC,OAAK,EAAE;AACLC,OAAG,EAAE;AACHC,UAAI,EAAEC,MADH;AAEHC,aAAO,EAAE;AAFN,KADA;AAKLC,UAAM,EAAE;AACNH,UAAI,EAAE,CAACC,MAAD,EAASG,MAAT,CADA;AAENF,aAAO,EAAE;AAFH,KALH;AASLG,OAAG,EAAEJ,MATA;AAULK,UAAM,EAAEL;AAVH,GAH0C;AAgBjDM,MAAI,EAAE,OAAO;AACXC,YAAQ,EAAE;AADC,GAAP,CAhB2C;AAoBjDC,UAAQ,EAAE;AACRC,UAAM;AACJ,aAAO;AACLC,eAAO,EAAE,OADJ;AAELC,eAAO,EAAE,KAAKJ,QAAL,GAAgB,CAAhB,GAAoB,CAFxB;AAGLK,iBAAS,EAAE,mBAAmB,KAAKC,QAAQ;AAHtC,OAAP;AAKD;;AAPO,GApBuC;;AA8BjDC,SAAO;AACL,SAAKC,IAAL;AA/B+C;;AAkCjDC,SAAO,EAAE;AACPD,QAAI;AACF,YAAME,GAAG,GAAG,KAAKC,KAAL,CAAWD,GAAvB;AAEA,UAAI,CAACA,GAAL,EAAU;;AAEV,UAAIA,GAAG,CAACE,QAAR,EAAkB;AAChB,aAAKC,SAAL;AACA,aAAKC,SAAL;AAFF,aAGO;AACLJ,WAAG,CAACK,gBAAJ,CAAqB,MAArB,EAA6B,MAAK;AAChC,eAAKF,SAAL;AACA,eAAKC,SAAL;AAFF,WAGG,KAHH;AAID;;AAED,WAAKd,QAAL,GAAgB,IAAhB;AAhBK;;AAkBPgB,aAAS;AACP,aAAO,KAAKL,KAAL,CAAWD,GAAX,CAAeO,aAAtB;AACD;;AApBM,GAlCwC;;AAyDjDC,QAAM,CAAEC,CAAF,EAAG;AACP,UAAMC,OAAO,GAAc;AACzBC,iBAAW,EAAE,mBADY;AAEzBC,WAAK,EAAE,KAAKpB,MAFa;AAGzBqB,WAAK,EAAE;AACL1B,WAAG,EAAE,KAAKA,GADL;AAELC,cAAM,EAAE,KAAKA,MAFR;AAGLP,WAAG,EAAE,KAAKA;AAHL,OAHkB;AAQzBiC,SAAG,EAAE;AARoB,KAA3B;AAWA,UAAMC,SAAS,GAAGN,CAAC,CAAC,KAAD,EAAQ;AACzBE,iBAAW,EAAE;AADY,KAAR,EAEhB,CACDF,CAAC,CAAC,KAAD,EAAQC,OAAR,CADA,CAFgB,CAAnB;AAMA,UAAMM,OAAO,GAAGP,CAAC,CAAC,KAAD,EAAQ;AACvBE,iBAAW,EAAE;AADU,KAAR,EAEd,KAAKM,MAAL,CAAYjC,OAFE,CAAjB;AAIA,WAAOyB,CAAC,CAAC,KAAD,EAAQ;AACdE,iBAAW,EAAE,YADC;AAEdC,WAAK,EAAE;AACL3B,cAAM,EAAE,GAAG,KAAKA,MAAM;AADjB,OAFO;AAKdiC,QAAE,EAAE,KAAKC;AALK,KAAR,EAML,CAACJ,SAAD,EAAYC,OAAZ,CANK,CAAR;AAOD;;AAtFgD,CAApC,CAAf","names":["Translatable","mixins","baseMixins","extend","name","props","alt","type","String","default","height","Number","src","srcset","data","isBooted","computed","styles","display","opacity","transform","parallax","mounted","init","methods","img","$refs","complete","translate","listeners","addEventListener","objHeight","naturalHeight","render","h","imgData","staticClass","style","attrs","ref","container","content","$slots","on","$listeners"],"sourceRoot":"","sources":["../../../src/components/VParallax/VParallax.ts"],"sourcesContent":["// Style\nimport './VParallax.sass'\n\n// Mixins\nimport Translatable from '../../mixins/translatable'\n\n// Types\nimport { VNode, VNodeData } from 'vue/types/vnode'\nimport mixins from '../../util/mixins'\n\nconst baseMixins = mixins(\n  Translatable\n)\ninterface options extends InstanceType<typeof baseMixins> {\n  $refs: {\n    img: HTMLImageElement\n  }\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-parallax',\n\n  props: {\n    alt: {\n      type: String,\n      default: '',\n    },\n    height: {\n      type: [String, Number],\n      default: 500,\n    },\n    src: String,\n    srcset: String,\n  },\n\n  data: () => ({\n    isBooted: false,\n  }),\n\n  computed: {\n    styles (): object {\n      return {\n        display: 'block',\n        opacity: this.isBooted ? 1 : 0,\n        transform: `translate(-50%, ${this.parallax}px)`,\n      }\n    },\n  },\n\n  mounted () {\n    this.init()\n  },\n\n  methods: {\n    init () {\n      const img = this.$refs.img\n\n      if (!img) return\n\n      if (img.complete) {\n        this.translate()\n        this.listeners()\n      } else {\n        img.addEventListener('load', () => {\n          this.translate()\n          this.listeners()\n        }, false)\n      }\n\n      this.isBooted = true\n    },\n    objHeight () {\n      return this.$refs.img.naturalHeight\n    },\n  },\n\n  render (h): VNode {\n    const imgData: VNodeData = {\n      staticClass: 'v-parallax__image',\n      style: this.styles,\n      attrs: {\n        src: this.src,\n        srcset: this.srcset,\n        alt: this.alt,\n      },\n      ref: 'img',\n    }\n\n    const container = h('div', {\n      staticClass: 'v-parallax__image-container',\n    }, [\n      h('img', imgData),\n    ])\n\n    const content = h('div', {\n      staticClass: 'v-parallax__content',\n    }, this.$slots.default)\n\n    return h('div', {\n      staticClass: 'v-parallax',\n      style: {\n        height: `${this.height}px`,\n      },\n      on: this.$listeners,\n    }, [container, content])\n  },\n})\n"]},"metadata":{},"sourceType":"module"}