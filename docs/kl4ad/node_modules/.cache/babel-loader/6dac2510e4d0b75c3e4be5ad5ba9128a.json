{"ast":null,"code":"import Vue from 'vue';\nimport { consoleError } from '../../util/console';\nimport { isCssColor } from '../../util/colorUtils';\nexport default Vue.extend({\n  name: 'colorable',\n  props: {\n    color: String\n  },\n  methods: {\n    setBackgroundColor(color, data = {}) {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (isCssColor(color)) {\n        data.style = { ...data.style,\n          'background-color': `${color}`,\n          'border-color': `${color}`\n        };\n      } else if (color) {\n        data.class = { ...data.class,\n          [color]: true\n        };\n      }\n\n      return data;\n    },\n\n    setTextColor(color, data = {}) {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (isCssColor(color)) {\n        data.style = { ...data.style,\n          color: `${color}`,\n          'caret-color': `${color}`\n        };\n      } else if (color) {\n        const [colorName, colorModifier] = color.toString().trim().split(' ', 2);\n        data.class = { ...data.class,\n          [colorName + '--text']: true\n        };\n\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true;\n        }\n      }\n\n      return data;\n    }\n\n  }\n});","map":{"version":3,"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,eAAeF,GAAG,CAACG,MAAJ,CAAW;AACxBC,MAAI,EAAE,WADkB;AAGxBC,OAAK,EAAE;AACLC,SAAK,EAAEC;AADF,GAHiB;AAOxBC,SAAO,EAAE;AACPC,sBAAkB,CAAEH,KAAF,EAA0BI,OAAkB,EAA5C,EAA8C;AAC9D,UAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACAV,oBAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAOS,IAAP;AACD;;AACD,UAAI,OAAOA,IAAI,CAACE,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACAX,oBAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAOS,IAAP;AACD;;AACD,UAAIR,UAAU,CAACI,KAAD,CAAd,EAAuB;AACrBI,YAAI,CAACC,KAAL,GAAa,EACX,GAAGD,IAAI,CAACC,KADG;AAEX,8BAAoB,GAAGL,KAAK,EAFjB;AAGX,0BAAgB,GAAGA,KAAK;AAHb,SAAb;AADF,aAMO,IAAIA,KAAJ,EAAW;AAChBI,YAAI,CAACE,KAAL,GAAa,EACX,GAAGF,IAAI,CAACE,KADG;AAEX,WAACN,KAAD,GAAS;AAFE,SAAb;AAID;;AAED,aAAOI,IAAP;AA3BK;;AA8BPG,gBAAY,CAAEP,KAAF,EAA0BI,OAAkB,EAA5C,EAA8C;AACxD,UAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACAV,oBAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAOS,IAAP;AACD;;AACD,UAAI,OAAOA,IAAI,CAACE,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACAX,oBAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAOS,IAAP;AACD;;AACD,UAAIR,UAAU,CAACI,KAAD,CAAd,EAAuB;AACrBI,YAAI,CAACC,KAAL,GAAa,EACX,GAAGD,IAAI,CAACC,KADG;AAEXL,eAAK,EAAE,GAAGA,KAAK,EAFJ;AAGX,yBAAe,GAAGA,KAAK;AAHZ,SAAb;AADF,aAMO,IAAIA,KAAJ,EAAW;AAChB,cAAM,CAACQ,SAAD,EAAYC,aAAZ,IAA6BT,KAAK,CAACU,QAAN,GAAiBC,IAAjB,GAAwBC,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,CAAnC;AACAR,YAAI,CAACE,KAAL,GAAa,EACX,GAAGF,IAAI,CAACE,KADG;AAEX,WAACE,SAAS,GAAG,QAAb,GAAwB;AAFb,SAAb;;AAIA,YAAIC,aAAJ,EAAmB;AACjBL,cAAI,CAACE,KAAL,CAAW,WAAWG,aAAtB,IAAuC,IAAvC;AACD;AACF;;AACD,aAAOL,IAAP;AACD;;AA5DM;AAPe,CAAX,CAAf","names":["Vue","consoleError","isCssColor","extend","name","props","color","String","methods","setBackgroundColor","data","style","class","setTextColor","colorName","colorModifier","toString","trim","split"],"sourceRoot":"","sources":["../../../src/mixins/colorable/index.ts"],"sourcesContent":["import Vue from 'vue'\nimport { VNodeData } from 'vue/types/vnode'\nimport { consoleError } from '../../util/console'\nimport { isCssColor } from '../../util/colorUtils'\n\nexport default Vue.extend({\n  name: 'colorable',\n\n  props: {\n    color: String,\n  },\n\n  methods: {\n    setBackgroundColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          'background-color': `${color}`,\n          'border-color': `${color}`,\n        }\n      } else if (color) {\n        data.class = {\n          ...data.class,\n          [color]: true,\n        }\n      }\n\n      return data\n    },\n\n    setTextColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          color: `${color}`,\n          'caret-color': `${color}`,\n        }\n      } else if (color) {\n        const [colorName, colorModifier] = color.toString().trim().split(' ', 2) as (string | undefined)[]\n        data.class = {\n          ...data.class,\n          [colorName + '--text']: true,\n        }\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true\n        }\n      }\n      return data\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}