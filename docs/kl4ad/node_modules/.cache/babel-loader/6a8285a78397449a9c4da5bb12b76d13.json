{"ast":null,"code":"import Vue from 'vue';\nexport function factory(prop = 'value', event = 'change') {\n  return Vue.extend({\n    name: 'proxyable',\n    model: {\n      prop,\n      event\n    },\n    props: {\n      [prop]: {\n        required: false\n      }\n    },\n\n    data() {\n      return {\n        internalLazyValue: this[prop]\n      };\n    },\n\n    computed: {\n      internalValue: {\n        get() {\n          return this.internalLazyValue;\n        },\n\n        set(val) {\n          if (val === this.internalLazyValue) return;\n          this.internalLazyValue = val;\n          this.$emit(event, val);\n        }\n\n      }\n    },\n    watch: {\n      [prop](val) {\n        this.internalLazyValue = val;\n      }\n\n    }\n  });\n}\n/* eslint-disable-next-line @typescript-eslint/no-redeclare */\n\nconst Proxyable = factory();\nexport default Proxyable;","map":{"version":3,"mappings":"AAAA,OAAOA,GAAP,MAAoC,KAApC;AAQA,OAAM,SAAUC,OAAV,CACJC,IAAI,GAAG,OADH,EAEJC,KAAK,GAAG,QAFJ,EAEY;AAEhB,SAAOH,GAAG,CAACI,MAAJ,CAAW;AAChBC,QAAI,EAAE,WADU;AAGhBC,SAAK,EAAE;AACLJ,UADK;AAELC;AAFK,KAHS;AAQhBI,SAAK,EAAE;AACL,OAACL,IAAD,GAAQ;AACNM,gBAAQ,EAAE;AADJ;AADH,KARS;;AAchBC,QAAI;AACF,aAAO;AACLC,yBAAiB,EAAE,KAAKR,IAAL;AADd,OAAP;AAfc;;AAoBhBS,YAAQ,EAAE;AACRC,mBAAa,EAAE;AACbC,WAAG;AACD,iBAAO,KAAKH,iBAAZ;AAFW;;AAIbI,WAAG,CAAEC,GAAF,EAAU;AACX,cAAIA,GAAG,KAAK,KAAKL,iBAAjB,EAAoC;AAEpC,eAAKA,iBAAL,GAAyBK,GAAzB;AAEA,eAAKC,KAAL,CAAWb,KAAX,EAAkBY,GAAlB;AACD;;AAVY;AADP,KApBM;AAmChBE,SAAK,EAAE;AACL,OAACf,IAAD,EAAQa,GAAR,EAAW;AACT,aAAKL,iBAAL,GAAyBK,GAAzB;AACD;;AAHI;AAnCS,GAAX,CAAP;AAyCD;AAED;;AACA,MAAMG,SAAS,GAAGjB,OAAO,EAAzB;AAEA,eAAeiB,SAAf","names":["Vue","factory","prop","event","extend","name","model","props","required","data","internalLazyValue","computed","internalValue","get","set","val","$emit","watch","Proxyable"],"sourceRoot":"","sources":["../../../src/mixins/proxyable/index.ts"],"sourcesContent":["import Vue, { VueConstructor } from 'vue'\n\nexport type Proxyable<T extends string = 'value'> = VueConstructor<Vue & {\n  internalLazyValue: unknown\n  internalValue: unknown\n} & Record<T, any>>\n\nexport function factory<T extends string = 'value'> (prop?: T, event?: string): Proxyable<T>\nexport function factory (\n  prop = 'value',\n  event = 'change'\n) {\n  return Vue.extend({\n    name: 'proxyable',\n\n    model: {\n      prop,\n      event,\n    },\n\n    props: {\n      [prop]: {\n        required: false,\n      },\n    },\n\n    data () {\n      return {\n        internalLazyValue: this[prop] as unknown,\n      }\n    },\n\n    computed: {\n      internalValue: {\n        get (): unknown {\n          return this.internalLazyValue\n        },\n        set (val: any) {\n          if (val === this.internalLazyValue) return\n\n          this.internalLazyValue = val\n\n          this.$emit(event, val)\n        },\n      },\n    },\n\n    watch: {\n      [prop] (val) {\n        this.internalLazyValue = val\n      },\n    },\n  })\n}\n\n/* eslint-disable-next-line @typescript-eslint/no-redeclare */\nconst Proxyable = factory()\n\nexport default Proxyable\n"]},"metadata":{},"sourceType":"module"}