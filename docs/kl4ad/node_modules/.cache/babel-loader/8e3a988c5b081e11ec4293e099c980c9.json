{"ast":null,"code":"/* eslint-disable no-multi-spaces */\n// Extensions\nimport { Service } from '../service'; // Utilities\n\nimport * as ThemeUtils from './utils';\nimport { getNestedValue } from '../../util/helpers'; // Types\n\nimport Vue from 'vue';\nexport class Theme extends Service {\n  constructor(preset) {\n    super();\n    this.disabled = false;\n    this.isDark = null;\n    this.unwatch = null;\n    this.vueMeta = null;\n    const {\n      dark,\n      disable,\n      options,\n      themes\n    } = preset[Theme.property];\n    this.dark = Boolean(dark);\n    this.defaults = this.themes = themes;\n    this.options = options;\n\n    if (disable) {\n      this.disabled = true;\n      return;\n    }\n\n    this.themes = {\n      dark: this.fillVariant(themes.dark, true),\n      light: this.fillVariant(themes.light, false)\n    };\n  } // When setting css, check for element and apply new values\n\n  /* eslint-disable-next-line accessor-pairs */\n\n\n  set css(val) {\n    if (this.vueMeta) {\n      if (this.isVueMeta23) {\n        this.applyVueMeta23();\n      }\n\n      return;\n    }\n\n    this.checkOrCreateStyleElement() && (this.styleEl.innerHTML = val);\n  }\n\n  set dark(val) {\n    const oldDark = this.isDark;\n    this.isDark = val; // Only apply theme after dark\n    // has already been set before\n\n    oldDark != null && this.applyTheme();\n  }\n\n  get dark() {\n    return Boolean(this.isDark);\n  } // Apply current theme default\n  // only called on client side\n\n\n  applyTheme() {\n    if (this.disabled) return this.clearCss();\n    this.css = this.generatedStyles;\n  }\n\n  clearCss() {\n    this.css = '';\n  } // Initialize theme for SSR and SPA\n  // Attach to ssrContext head or\n  // apply new theme to document\n\n\n  init(root, ssrContext) {\n    if (this.disabled) return;\n    /* istanbul ignore else */\n\n    if (root.$meta) {\n      this.initVueMeta(root);\n    } else if (ssrContext) {\n      this.initSSR(ssrContext);\n    }\n\n    this.initTheme(root);\n  } // Allows for you to set target theme\n\n\n  setTheme(theme, value) {\n    this.themes[theme] = Object.assign(this.themes[theme], value);\n    this.applyTheme();\n  } // Reset theme defaults\n\n\n  resetThemes() {\n    this.themes.light = Object.assign({}, this.defaults.light);\n    this.themes.dark = Object.assign({}, this.defaults.dark);\n    this.applyTheme();\n  } // Check for existence of style element\n\n\n  checkOrCreateStyleElement() {\n    this.styleEl = document.getElementById('vuetify-theme-stylesheet');\n    /* istanbul ignore next */\n\n    if (this.styleEl) return true;\n    this.genStyleElement(); // If doesn't have it, create it\n\n    return Boolean(this.styleEl);\n  }\n\n  fillVariant(theme = {}, dark) {\n    const defaultTheme = this.themes[dark ? 'dark' : 'light'];\n    return Object.assign({}, defaultTheme, theme);\n  } // Generate the style element\n  // if applicable\n\n\n  genStyleElement() {\n    /* istanbul ignore if */\n    if (typeof document === 'undefined') return;\n    /* istanbul ignore next */\n\n    this.styleEl = document.createElement('style');\n    this.styleEl.type = 'text/css';\n    this.styleEl.id = 'vuetify-theme-stylesheet';\n\n    if (this.options.cspNonce) {\n      this.styleEl.setAttribute('nonce', this.options.cspNonce);\n    }\n\n    document.head.appendChild(this.styleEl);\n  }\n\n  initVueMeta(root) {\n    this.vueMeta = root.$meta();\n\n    if (this.isVueMeta23) {\n      // vue-meta needs to apply after mounted()\n      root.$nextTick(() => {\n        this.applyVueMeta23();\n      });\n      return;\n    }\n\n    const metaKeyName = typeof this.vueMeta.getOptions === 'function' ? this.vueMeta.getOptions().keyName : 'metaInfo';\n    const metaInfo = root.$options[metaKeyName] || {};\n\n    root.$options[metaKeyName] = () => {\n      metaInfo.style = metaInfo.style || [];\n      const vuetifyStylesheet = metaInfo.style.find(s => s.id === 'vuetify-theme-stylesheet');\n\n      if (!vuetifyStylesheet) {\n        metaInfo.style.push({\n          cssText: this.generatedStyles,\n          type: 'text/css',\n          id: 'vuetify-theme-stylesheet',\n          nonce: (this.options || {}).cspNonce\n        });\n      } else {\n        vuetifyStylesheet.cssText = this.generatedStyles;\n      }\n\n      return metaInfo;\n    };\n  }\n\n  applyVueMeta23() {\n    const {\n      set\n    } = this.vueMeta.addApp('vuetify');\n    set({\n      style: [{\n        cssText: this.generatedStyles,\n        type: 'text/css',\n        id: 'vuetify-theme-stylesheet',\n        nonce: this.options.cspNonce\n      }]\n    });\n  }\n\n  initSSR(ssrContext) {\n    // SSR\n    const nonce = this.options.cspNonce ? ` nonce=\"${this.options.cspNonce}\"` : '';\n    ssrContext.head = ssrContext.head || '';\n    ssrContext.head += `<style type=\"text/css\" id=\"vuetify-theme-stylesheet\"${nonce}>${this.generatedStyles}</style>`;\n  }\n\n  initTheme(root) {\n    // Only watch for reactivity on client side\n    if (typeof document === 'undefined') return; // If we get here somehow, ensure\n    // existing instance is removed\n\n    if (this.unwatch) {\n      this.unwatch();\n      this.unwatch = null;\n    } // TODO: Update to use RFC if merged\n    // https://github.com/vuejs/rfcs/blob/advanced-reactivity-api/active-rfcs/0000-advanced-reactivity-api.md\n\n\n    root.$once('hook:created', () => {\n      const obs = Vue.observable({\n        themes: this.themes\n      });\n      this.unwatch = root.$watch(() => obs.themes, () => this.applyTheme(), {\n        deep: true\n      });\n    });\n    this.applyTheme();\n  }\n\n  get currentTheme() {\n    const target = this.dark ? 'dark' : 'light';\n    return this.themes[target];\n  }\n\n  get generatedStyles() {\n    const theme = this.parsedTheme;\n    /* istanbul ignore next */\n\n    const options = this.options || {};\n    let css;\n\n    if (options.themeCache != null) {\n      css = options.themeCache.get(theme);\n      /* istanbul ignore if */\n\n      if (css != null) return css;\n    }\n\n    css = ThemeUtils.genStyles(theme, options.customProperties);\n\n    if (options.minifyTheme != null) {\n      css = options.minifyTheme(css);\n    }\n\n    if (options.themeCache != null) {\n      options.themeCache.set(theme, css);\n    }\n\n    return css;\n  }\n\n  get parsedTheme() {\n    return ThemeUtils.parse(this.currentTheme || {}, undefined, getNestedValue(this.options, ['variations'], true));\n  } // Is using v2.3 of vue-meta\n  // https://github.com/nuxt/vue-meta/releases/tag/v2.3.0\n\n\n  get isVueMeta23() {\n    return typeof this.vueMeta.addApp === 'function';\n  }\n\n}\nTheme.property = 'theme';","map":{"version":3,"mappings":"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","names":["Service","ThemeUtils","getNestedValue","Vue","Theme","constructor","preset","dark","disable","options","themes","property","Boolean","defaults","disabled","fillVariant","light","css","val","vueMeta","isVueMeta23","applyVueMeta23","checkOrCreateStyleElement","styleEl","innerHTML","oldDark","isDark","applyTheme","clearCss","generatedStyles","init","root","ssrContext","$meta","initVueMeta","initSSR","initTheme","setTheme","theme","value","Object","assign","resetThemes","document","getElementById","genStyleElement","defaultTheme","createElement","type","id","cspNonce","setAttribute","head","appendChild","$nextTick","metaKeyName","getOptions","keyName","metaInfo","$options","style","vuetifyStylesheet","find","s","push","cssText","nonce","set","addApp","unwatch","$once","obs","observable","$watch","deep","currentTheme","target","parsedTheme","themeCache","get","genStyles","customProperties","minifyTheme","parse","undefined"],"sourceRoot":"","sources":["../../../src/services/theme/index.ts"],"sourcesContent":["/* eslint-disable no-multi-spaces */\n// Extensions\nimport { Service } from '../service'\n\n// Utilities\nimport * as ThemeUtils from './utils'\nimport { getNestedValue } from '../../util/helpers'\n\n// Types\nimport Vue from 'vue'\nimport { VuetifyPreset } from 'vuetify/types/services/presets'\nimport {\n  VuetifyParsedTheme,\n  VuetifyThemes,\n  VuetifyThemeVariant,\n  Theme as ITheme,\n} from 'vuetify/types/services/theme'\n\nexport class Theme extends Service {\n  static property: 'theme' = 'theme'\n\n  public disabled = false\n\n  public options: ITheme['options']\n\n  public styleEl?: HTMLStyleElement\n\n  public themes: VuetifyThemes\n\n  public defaults: VuetifyThemes\n\n  private isDark = null as boolean | null\n\n  private unwatch = null as (() => void) | null\n\n  private vueMeta = null as any | null\n\n  constructor (preset: VuetifyPreset) {\n    super()\n\n    const {\n      dark,\n      disable,\n      options,\n      themes,\n    } = preset[Theme.property]\n\n    this.dark = Boolean(dark)\n    this.defaults = this.themes = themes\n    this.options = options\n\n    if (disable) {\n      this.disabled = true\n\n      return\n    }\n\n    this.themes = {\n      dark: this.fillVariant(themes.dark, true),\n      light: this.fillVariant(themes.light, false),\n    }\n  }\n\n  // When setting css, check for element and apply new values\n  /* eslint-disable-next-line accessor-pairs */\n  set css (val: string) {\n    if (this.vueMeta) {\n      if (this.isVueMeta23) {\n        this.applyVueMeta23()\n      }\n      return\n    }\n    this.checkOrCreateStyleElement() && (this.styleEl!.innerHTML = val)\n  }\n\n  set dark (val: boolean) {\n    const oldDark = this.isDark\n\n    this.isDark = val\n    // Only apply theme after dark\n    // has already been set before\n    oldDark != null && this.applyTheme()\n  }\n\n  get dark () {\n    return Boolean(this.isDark)\n  }\n\n  // Apply current theme default\n  // only called on client side\n  public applyTheme (): void {\n    if (this.disabled) return this.clearCss()\n\n    this.css = this.generatedStyles\n  }\n\n  public clearCss (): void {\n    this.css = ''\n  }\n\n  // Initialize theme for SSR and SPA\n  // Attach to ssrContext head or\n  // apply new theme to document\n  public init (root: Vue, ssrContext?: any): void {\n    if (this.disabled) return\n\n    /* istanbul ignore else */\n    if ((root as any).$meta) {\n      this.initVueMeta(root)\n    } else if (ssrContext) {\n      this.initSSR(ssrContext)\n    }\n\n    this.initTheme(root)\n  }\n\n  // Allows for you to set target theme\n  public setTheme (theme: 'light' | 'dark', value: object) {\n    this.themes[theme] = Object.assign(this.themes[theme], value)\n    this.applyTheme()\n  }\n\n  // Reset theme defaults\n  public resetThemes () {\n    this.themes.light = Object.assign({}, this.defaults.light)\n    this.themes.dark = Object.assign({}, this.defaults.dark)\n    this.applyTheme()\n  }\n\n  // Check for existence of style element\n  private checkOrCreateStyleElement (): boolean {\n    this.styleEl = document.getElementById('vuetify-theme-stylesheet') as HTMLStyleElement\n\n    /* istanbul ignore next */\n    if (this.styleEl) return true\n\n    this.genStyleElement() // If doesn't have it, create it\n\n    return Boolean(this.styleEl)\n  }\n\n  private fillVariant (\n    theme: Partial<VuetifyThemeVariant> = {},\n    dark: boolean\n  ): VuetifyThemeVariant {\n    const defaultTheme = this.themes[dark ? 'dark' : 'light']\n\n    return Object.assign({},\n      defaultTheme,\n      theme\n    )\n  }\n\n  // Generate the style element\n  // if applicable\n  private genStyleElement (): void {\n    /* istanbul ignore if */\n    if (typeof document === 'undefined') return\n\n    /* istanbul ignore next */\n    this.styleEl = document.createElement('style')\n    this.styleEl.type = 'text/css'\n    this.styleEl.id = 'vuetify-theme-stylesheet'\n\n    if (this.options.cspNonce) {\n      this.styleEl.setAttribute('nonce', this.options.cspNonce)\n    }\n\n    document.head.appendChild(this.styleEl)\n  }\n\n  private initVueMeta (root: any) {\n    this.vueMeta = root.$meta()\n    if (this.isVueMeta23) {\n      // vue-meta needs to apply after mounted()\n      root.$nextTick(() => {\n        this.applyVueMeta23()\n      })\n      return\n    }\n\n    const metaKeyName = typeof this.vueMeta.getOptions === 'function' ? this.vueMeta.getOptions().keyName : 'metaInfo'\n    const metaInfo = root.$options[metaKeyName] || {}\n\n    root.$options[metaKeyName] = () => {\n      metaInfo.style = metaInfo.style || []\n\n      const vuetifyStylesheet = metaInfo.style.find((s: any) => s.id === 'vuetify-theme-stylesheet')\n\n      if (!vuetifyStylesheet) {\n        metaInfo.style.push({\n          cssText: this.generatedStyles,\n          type: 'text/css',\n          id: 'vuetify-theme-stylesheet',\n          nonce: (this.options || {}).cspNonce,\n        })\n      } else {\n        vuetifyStylesheet.cssText = this.generatedStyles\n      }\n\n      return metaInfo\n    }\n  }\n\n  private applyVueMeta23 () {\n    const { set } = this.vueMeta.addApp('vuetify')\n\n    set({\n      style: [{\n        cssText: this.generatedStyles,\n        type: 'text/css',\n        id: 'vuetify-theme-stylesheet',\n        nonce: this.options.cspNonce,\n      }],\n    })\n  }\n\n  private initSSR (ssrContext?: any) {\n    // SSR\n    const nonce = this.options.cspNonce ? ` nonce=\"${this.options.cspNonce}\"` : ''\n    ssrContext.head = ssrContext.head || ''\n    ssrContext.head += `<style type=\"text/css\" id=\"vuetify-theme-stylesheet\"${nonce}>${this.generatedStyles}</style>`\n  }\n\n  private initTheme (root: Vue) {\n    // Only watch for reactivity on client side\n    if (typeof document === 'undefined') return\n\n    // If we get here somehow, ensure\n    // existing instance is removed\n    if (this.unwatch) {\n      this.unwatch()\n      this.unwatch = null\n    }\n\n    // TODO: Update to use RFC if merged\n    // https://github.com/vuejs/rfcs/blob/advanced-reactivity-api/active-rfcs/0000-advanced-reactivity-api.md\n    root.$once('hook:created', () => {\n      const obs = Vue.observable({ themes: this.themes })\n      this.unwatch = root.$watch(() => obs.themes, () => this.applyTheme(), { deep: true })\n    })\n    this.applyTheme()\n  }\n\n  get currentTheme () {\n    const target = this.dark ? 'dark' : 'light'\n\n    return this.themes[target]\n  }\n\n  get generatedStyles (): string {\n    const theme = this.parsedTheme\n    /* istanbul ignore next */\n    const options = this.options || {}\n    let css\n\n    if (options.themeCache != null) {\n      css = options.themeCache.get(theme)\n      /* istanbul ignore if */\n      if (css != null) return css\n    }\n\n    css = ThemeUtils.genStyles(theme, options.customProperties)\n\n    if (options.minifyTheme != null) {\n      css = options.minifyTheme(css)\n    }\n\n    if (options.themeCache != null) {\n      options.themeCache.set(theme, css)\n    }\n\n    return css\n  }\n\n  get parsedTheme (): VuetifyParsedTheme {\n    return ThemeUtils.parse(\n      this.currentTheme || {},\n      undefined,\n      getNestedValue(this.options, ['variations'], true)\n    )\n  }\n\n  // Is using v2.3 of vue-meta\n  // https://github.com/nuxt/vue-meta/releases/tag/v2.3.0\n  private get isVueMeta23 (): boolean {\n    return typeof this.vueMeta.addApp === 'function'\n  }\n}\n"]},"metadata":{},"sourceType":"module"}