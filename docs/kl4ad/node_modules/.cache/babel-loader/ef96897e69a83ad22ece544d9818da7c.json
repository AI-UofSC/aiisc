{"ast":null,"code":"import _slicedToArray from \"/Users/vishal/Desktop/aiisc/docs/kl4ad/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Users/vishal/Desktop/aiisc/docs/kl4ad/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/vishal/Desktop/aiisc/docs/kl4ad/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport Vue from 'vue';\nimport { consoleError } from '../../util/console';\nimport { isCssColor } from '../../util/colorUtils';\nexport default Vue.extend({\n  name: 'colorable',\n  props: {\n    color: String\n  },\n  methods: {\n    setBackgroundColor: function setBackgroundColor(color) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (isCssColor(color)) {\n        data.style = _objectSpread(_objectSpread({}, data.style), {}, {\n          'background-color': \"\".concat(color),\n          'border-color': \"\".concat(color)\n        });\n      } else if (color) {\n        data.class = _objectSpread(_objectSpread({}, data.class), {}, _defineProperty({}, color, true));\n      }\n\n      return data;\n    },\n    setTextColor: function setTextColor(color) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (isCssColor(color)) {\n        data.style = _objectSpread(_objectSpread({}, data.style), {}, {\n          color: \"\".concat(color),\n          'caret-color': \"\".concat(color)\n        });\n      } else if (color) {\n        var _color$toString$trim$ = color.toString().trim().split(' ', 2),\n            _color$toString$trim$2 = _slicedToArray(_color$toString$trim$, 2),\n            colorName = _color$toString$trim$2[0],\n            colorModifier = _color$toString$trim$2[1];\n\n        data.class = _objectSpread(_objectSpread({}, data.class), {}, _defineProperty({}, colorName + '--text', true));\n\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true;\n        }\n      }\n\n      return data;\n    }\n  }\n});","map":{"version":3,"mappings":";;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,eAAeF,GAAG,CAACG,MAAJ,CAAW;AACxBC,MAAI,EAAE,WADkB;AAGxBC,OAAK,EAAE;AACLC,SAAK,EAAEC;AADF,GAHiB;AAOxBC,SAAO,EAAE;AACPC,sBADO,8BACaH,KADb,EACyD;AAAA,UAApBI,IAAoB,uEAAF,EAAE;;AAC9D,UAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACAV,oBAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAOS,IAAP;AACD;;AACD,UAAI,OAAOA,IAAI,CAACE,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACAX,oBAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAOS,IAAP;AACD;;AACD,UAAIR,UAAU,CAACI,KAAD,CAAd,EAAuB;AACrBI,YAAI,CAACC,KAAL,mCACKD,IAAI,CAACC,KADV;AAEE,wCAAuBL,KAAvB,CAFF;AAGE,oCAAmBA,KAAnB;AAHF;AADF,aAMO,IAAIA,KAAJ,EAAW;AAChBI,YAAI,CAACE,KAAL,mCACKF,IAAI,CAACE,KADV,2BAEGN,KAFH,EAEW,IAFX;AAID;;AAED,aAAOI,IAAP;AA3BK;AA8BPG,gBA9BO,wBA8BOP,KA9BP,EA8BmD;AAAA,UAApBI,IAAoB,uEAAF,EAAE;;AACxD,UAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACAV,oBAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAOS,IAAP;AACD;;AACD,UAAI,OAAOA,IAAI,CAACE,KAAZ,KAAsB,QAA1B,EAAoC;AAClC;AACAX,oBAAY,CAAC,yBAAD,EAA4B,IAA5B,CAAZ,CAFkC,CAGlC;;AACA,eAAOS,IAAP;AACD;;AACD,UAAIR,UAAU,CAACI,KAAD,CAAd,EAAuB;AACrBI,YAAI,CAACC,KAAL,mCACKD,IAAI,CAACC,KADV;AAEEL,eAAK,YAAKA,KAAL,CAFP;AAGE,mCAAkBA,KAAlB;AAHF;AADF,aAMO,IAAIA,KAAJ,EAAW;AAChB,oCAAmCA,KAAK,CAACQ,QAAN,GAAiBC,IAAjB,GAAwBC,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,CAAnC;AAAA;AAAA,YAAOC,SAAP;AAAA,YAAkBC,aAAlB;;AACAR,YAAI,CAACE,KAAL,mCACKF,IAAI,CAACE,KADV,2BAEGK,SAAS,GAAG,QAFf,EAE0B,IAF1B;;AAIA,YAAIC,aAAJ,EAAmB;AACjBR,cAAI,CAACE,KAAL,CAAW,WAAWM,aAAtB,IAAuC,IAAvC;AACD;AACF;;AACD,aAAOR,IAAP;AACD;AA5DM;AAPe,CAAX,CAAf","names":["Vue","consoleError","isCssColor","extend","name","props","color","String","methods","setBackgroundColor","data","style","class","setTextColor","toString","trim","split","colorName","colorModifier"],"sourceRoot":"","sources":["../../../src/mixins/colorable/index.ts"],"sourcesContent":["import Vue from 'vue'\nimport { VNodeData } from 'vue/types/vnode'\nimport { consoleError } from '../../util/console'\nimport { isCssColor } from '../../util/colorUtils'\n\nexport default Vue.extend({\n  name: 'colorable',\n\n  props: {\n    color: String,\n  },\n\n  methods: {\n    setBackgroundColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          'background-color': `${color}`,\n          'border-color': `${color}`,\n        }\n      } else if (color) {\n        data.class = {\n          ...data.class,\n          [color]: true,\n        }\n      }\n\n      return data\n    },\n\n    setTextColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          color: `${color}`,\n          'caret-color': `${color}`,\n        }\n      } else if (color) {\n        const [colorName, colorModifier] = color.toString().trim().split(' ', 2) as (string | undefined)[]\n        data.class = {\n          ...data.class,\n          [colorName + '--text']: true,\n        }\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true\n        }\n      }\n      return data\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}