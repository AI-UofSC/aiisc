{"ast":null,"code":"import \"../../../src/components/VGrid/VGrid.sass\";\nimport Vue from 'vue';\nimport mergeData from '../../util/mergeData';\nimport { upperFirst } from '../../util/helpers'; // no xs\n\nconst breakpoints = ['sm', 'md', 'lg', 'xl'];\nconst ALIGNMENT = ['start', 'end', 'center'];\n\nfunction makeProps(prefix, def) {\n  return breakpoints.reduce((props, val) => {\n    props[prefix + upperFirst(val)] = def();\n    return props;\n  }, {});\n}\n\nconst alignValidator = str => [...ALIGNMENT, 'baseline', 'stretch'].includes(str);\n\nconst alignProps = makeProps('align', () => ({\n  type: String,\n  default: null,\n  validator: alignValidator\n}));\n\nconst justifyValidator = str => [...ALIGNMENT, 'space-between', 'space-around'].includes(str);\n\nconst justifyProps = makeProps('justify', () => ({\n  type: String,\n  default: null,\n  validator: justifyValidator\n}));\n\nconst alignContentValidator = str => [...ALIGNMENT, 'space-between', 'space-around', 'stretch'].includes(str);\n\nconst alignContentProps = makeProps('alignContent', () => ({\n  type: String,\n  default: null,\n  validator: alignContentValidator\n}));\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps)\n};\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content'\n};\n\nfunction breakpointClass(type, prop, val) {\n  let className = classMap[type];\n\n  if (val == null) {\n    return undefined;\n  }\n\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '');\n    className += `-${breakpoint}`;\n  } // .align-items-sm-center\n\n\n  className += `-${val}`;\n  return className.toLowerCase();\n}\n\nconst cache = new Map();\nexport default Vue.extend({\n  name: 'v-row',\n  functional: true,\n  props: {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    dense: Boolean,\n    noGutters: Boolean,\n    align: {\n      type: String,\n      default: null,\n      validator: alignValidator\n    },\n    ...alignProps,\n    justify: {\n      type: String,\n      default: null,\n      validator: justifyValidator\n    },\n    ...justifyProps,\n    alignContent: {\n      type: String,\n      default: null,\n      validator: alignContentValidator\n    },\n    ...alignContentProps\n  },\n\n  render(h, {\n    props,\n    data,\n    children\n  }) {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = '';\n\n    for (const prop in props) {\n      cacheKey += String(props[prop]);\n    }\n\n    let classList = cache.get(cacheKey);\n\n    if (!classList) {\n      classList = []; // Loop through `align`, `justify`, `alignContent` breakpoint props\n\n      let type;\n\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value = props[prop];\n          const className = breakpointClass(type, prop, value);\n          if (className) classList.push(className);\n        });\n      }\n\n      classList.push({\n        'no-gutters': props.noGutters,\n        'row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent\n      });\n      cache.set(cacheKey, classList);\n    }\n\n    return h(props.tag, mergeData(data, {\n      staticClass: 'row',\n      class: classList\n    }), children);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["Vue","mergeData","upperFirst","breakpoints","ALIGNMENT","makeProps","prefix","def","reduce","props","val","alignValidator","str","includes","alignProps","type","String","default","validator","justifyValidator","justifyProps","alignContentValidator","alignContentProps","propMap","align","Object","keys","justify","alignContent","classMap","breakpointClass","prop","className","undefined","breakpoint","replace","toLowerCase","cache","Map","extend","name","functional","tag","dense","Boolean","noGutters","render","h","data","children","cacheKey","classList","get","forEach","value","push","set","staticClass","class"],"sourceRoot":"","sources":["../../../src/components/VGrid/VRow.ts"],"sourcesContent":["import './VGrid.sass'\n\nimport Vue, { PropOptions } from 'vue'\nimport mergeData from '../../util/mergeData'\nimport { upperFirst } from '../../util/helpers'\n\n// no xs\nconst breakpoints = ['sm', 'md', 'lg', 'xl']\n\nconst ALIGNMENT = ['start', 'end', 'center']\n\nfunction makeProps (prefix: string, def: () => PropOptions) {\n  return breakpoints.reduce((props, val) => {\n    props[prefix + upperFirst(val)] = def()\n    return props\n  }, {} as Dictionary<PropOptions>)\n}\n\nconst alignValidator = (str: any) => [...ALIGNMENT, 'baseline', 'stretch'].includes(str)\nconst alignProps = makeProps('align', () => ({\n  type: String,\n  default: null,\n  validator: alignValidator,\n}))\n\nconst justifyValidator = (str: any) => [...ALIGNMENT, 'space-between', 'space-around'].includes(str)\nconst justifyProps = makeProps('justify', () => ({\n  type: String,\n  default: null,\n  validator: justifyValidator,\n}))\n\nconst alignContentValidator = (str: any) => [...ALIGNMENT, 'space-between', 'space-around', 'stretch'].includes(str)\nconst alignContentProps = makeProps('alignContent', () => ({\n  type: String,\n  default: null,\n  validator: alignContentValidator,\n}))\n\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps),\n}\n\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content',\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: string) {\n  let className = classMap[type]\n  if (val == null) {\n    return undefined\n  }\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  // .align-items-sm-center\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nconst cache = new Map<string, any[]>()\n\nexport default Vue.extend({\n  name: 'v-row',\n  functional: true,\n  props: {\n    tag: {\n      type: String,\n      default: 'div',\n    },\n    dense: Boolean,\n    noGutters: Boolean,\n    align: {\n      type: String,\n      default: null,\n      validator: alignValidator,\n    },\n    ...alignProps,\n    justify: {\n      type: String,\n      default: null,\n      validator: justifyValidator,\n    },\n    ...justifyProps,\n    alignContent: {\n      type: String,\n      default: null,\n      validator: alignContentValidator,\n    },\n    ...alignContentProps,\n  },\n  render (h, { props, data, children }) {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = ''\n    for (const prop in props) {\n      cacheKey += String((props as any)[prop])\n    }\n    let classList = cache.get(cacheKey)\n\n    if (!classList) {\n      classList = []\n      // Loop through `align`, `justify`, `alignContent` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      classList.push({\n        'no-gutters': props.noGutters,\n        'row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent,\n      })\n\n      cache.set(cacheKey, classList)\n    }\n\n    return h(\n      props.tag,\n      mergeData(data, {\n        staticClass: 'row',\n        class: classList,\n      }),\n      children\n    )\n  },\n})\n"]},"metadata":{},"sourceType":"module"}