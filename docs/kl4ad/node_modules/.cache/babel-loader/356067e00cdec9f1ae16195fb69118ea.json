{"ast":null,"code":"import \"../../../src/components/VGrid/VGrid.sass\";\nimport Vue from 'vue';\nimport mergeData from '../../util/mergeData';\nimport { upperFirst } from '../../util/helpers'; // no xs\n\nconst breakpoints = ['sm', 'md', 'lg', 'xl'];\n\nconst breakpointProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props[val] = {\n      type: [Boolean, String, Number],\n      default: false\n    };\n    return props;\n  }, {});\n})();\n\nconst offsetProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['offset' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null\n    };\n    return props;\n  }, {});\n})();\n\nconst orderProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['order' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null\n    };\n    return props;\n  }, {});\n})();\n\nconst propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps)\n};\n\nfunction breakpointClass(type, prop, val) {\n  let className = type;\n\n  if (val == null || val === false) {\n    return undefined;\n  }\n\n  if (prop) {\n    const breakpoint = prop.replace(type, '');\n    className += `-${breakpoint}`;\n  } // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n\n\n  if (type === 'col' && (val === '' || val === true)) {\n    // .col-md\n    return className.toLowerCase();\n  } // .order-md-6\n\n\n  className += `-${val}`;\n  return className.toLowerCase();\n}\n\nconst cache = new Map();\nexport default Vue.extend({\n  name: 'v-col',\n  functional: true,\n  props: {\n    cols: {\n      type: [Boolean, String, Number],\n      default: false\n    },\n    ...breakpointProps,\n    offset: {\n      type: [String, Number],\n      default: null\n    },\n    ...offsetProps,\n    order: {\n      type: [String, Number],\n      default: null\n    },\n    ...orderProps,\n    alignSelf: {\n      type: String,\n      default: null,\n      validator: str => ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str)\n    },\n    tag: {\n      type: String,\n      default: 'div'\n    }\n  },\n\n  render(h, {\n    props,\n    data,\n    children,\n    parent\n  }) {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = '';\n\n    for (const prop in props) {\n      cacheKey += String(props[prop]);\n    }\n\n    let classList = cache.get(cacheKey);\n\n    if (!classList) {\n      classList = []; // Loop through `col`, `offset`, `order` breakpoint props\n\n      let type;\n\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value = props[prop];\n          const className = breakpointClass(type, prop, value);\n          if (className) classList.push(className);\n        });\n      }\n\n      const hasColClasses = classList.some(className => className.startsWith('col-'));\n      classList.push({\n        // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.\n        col: !hasColClasses || !props.cols,\n        [`col-${props.cols}`]: props.cols,\n        [`offset-${props.offset}`]: props.offset,\n        [`order-${props.order}`]: props.order,\n        [`align-self-${props.alignSelf}`]: props.alignSelf\n      });\n      cache.set(cacheKey, classList);\n    }\n\n    return h(props.tag, mergeData(data, {\n      class: classList\n    }), children);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["Vue","mergeData","upperFirst","breakpoints","breakpointProps","reduce","props","val","type","Boolean","String","Number","default","offsetProps","orderProps","propMap","col","Object","keys","offset","order","breakpointClass","prop","className","undefined","breakpoint","replace","toLowerCase","cache","Map","extend","name","functional","cols","alignSelf","validator","str","includes","tag","render","h","data","children","parent","cacheKey","classList","get","forEach","value","push","hasColClasses","some","startsWith","set","class"],"sourceRoot":"","sources":["../../../src/components/VGrid/VCol.ts"],"sourcesContent":["import './VGrid.sass'\n\nimport Vue, { VNode, PropOptions } from 'vue'\nimport mergeData from '../../util/mergeData'\nimport { upperFirst } from '../../util/helpers'\n\n// no xs\nconst breakpoints = ['sm', 'md', 'lg', 'xl']\n\nconst breakpointProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props[val] = {\n      type: [Boolean, String, Number],\n      default: false,\n    }\n    return props\n  }, {} as Dictionary<PropOptions>)\n})()\n\nconst offsetProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['offset' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Dictionary<PropOptions>)\n})()\n\nconst orderProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props['order' + upperFirst(val)] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Dictionary<PropOptions>)\n})()\n\nconst propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps),\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: boolean | string | number) {\n  let className = type\n  if (val == null || val === false) {\n    return undefined\n  }\n  if (prop) {\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n  if (type === 'col' && (val === '' || val === true)) {\n    // .col-md\n    return className.toLowerCase()\n  }\n  // .order-md-6\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nconst cache = new Map<string, any[]>()\n\nexport default Vue.extend({\n  name: 'v-col',\n  functional: true,\n  props: {\n    cols: {\n      type: [Boolean, String, Number],\n      default: false,\n    },\n    ...breakpointProps,\n    offset: {\n      type: [String, Number],\n      default: null,\n    },\n    ...offsetProps,\n    order: {\n      type: [String, Number],\n      default: null,\n    },\n    ...orderProps,\n    alignSelf: {\n      type: String,\n      default: null,\n      validator: (str: any) => ['auto', 'start', 'end', 'center', 'baseline', 'stretch'].includes(str),\n    },\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n  render (h, { props, data, children, parent }): VNode {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = ''\n    for (const prop in props) {\n      cacheKey += String((props as any)[prop])\n    }\n    let classList = cache.get(cacheKey)\n\n    if (!classList) {\n      classList = []\n      // Loop through `col`, `offset`, `order` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string | number | boolean = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      const hasColClasses = classList.some(className => className.startsWith('col-'))\n\n      classList.push({\n        // Default to .col if no other col-{bp}-* classes generated nor `cols` specified.\n        col: !hasColClasses || !props.cols,\n        [`col-${props.cols}`]: props.cols,\n        [`offset-${props.offset}`]: props.offset,\n        [`order-${props.order}`]: props.order,\n        [`align-self-${props.alignSelf}`]: props.alignSelf,\n      })\n\n      cache.set(cacheKey, classList)\n    }\n\n    return h(props.tag, mergeData(data, { class: classList }), children)\n  },\n})\n"]},"metadata":{},"sourceType":"module"}